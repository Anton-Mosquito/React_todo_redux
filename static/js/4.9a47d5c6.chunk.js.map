{"version":3,"sources":["components/todoItem/index.tsx","components/todoList/index.tsx"],"names":["mapDispatchToProps","toggleTodo","removeTodo","connect","todo","index","dispatch","useDispatch","classes","completed","push","addItem","useCallback","id","remove","ListItem","Label","className","join","Input","type","onChange","bind","checked","Checkbox","NumberTodo","title","Button","onClick","width","height","href","sprite","styled","li","label","input","p","span","button","List","TodoList","todos","useSelector","state","map","String","ul"],"mappings":"sMAmDMA,EAAqB,CACzBC,eACAC,gBAGaC,cAAQ,KAAKH,EAAbG,EA3CE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAClBC,EAAWC,cACXC,EAAU,GAEZJ,EAAKK,WACPD,EAAQE,KAAK,QAGf,IAAMC,EAAUC,uBAAY,SAACC,GAC3BP,EAASL,YAAWY,MACpB,CAACP,IAEGQ,EAASF,uBAAY,SAACC,GAC1BP,EAASJ,YAAWW,MACpB,CAACP,IAEH,OACE,eAACS,EAAD,WACE,eAACC,EAAD,CAAOC,UAAWT,EAAQU,KAAK,KAA/B,UACE,cAACC,EAAD,CACEC,KAAK,WACLC,SAAUV,EAAQW,KAAK,KAAKlB,EAAKS,IACjCU,QAASnB,EAAKK,YAEhB,cAACe,EAAD,IACA,cAACC,EAAD,UAAapB,EAAQ,IAPvB,SAQGD,EAAKsB,SAER,cAACC,EAAD,CAAQC,QAASd,EAAOQ,KAAK,KAAKlB,EAAKS,IAAvC,SACE,qBAAKgB,MAAM,OAAOC,OAAO,OAAzB,SACE,qBAAKC,KAAMC,IAAS,qBAgBxBjB,EAAWkB,IAAOC,GAAV,0QAcRlB,EAAQiB,IAAOE,MAAV,0IAQLhB,EAAQc,IAAOG,MAAV,+OAcLX,EAAaQ,IAAOI,EAAV,iDAIVb,EAAWS,IAAOK,KAAV,4YAuBRX,EAASM,IAAOM,OAAV,wOClGNC,GAFSC,UAZY,WACzB,IAAMC,EAAQC,aAAY,SAACC,GAAD,OAAsBA,EAAMxC,KAAKsC,SAE3D,OACE,cAACF,EAAD,UACGE,EAAMG,KAAI,SAACzC,EAA4BC,GACtC,OAAO,cAAC,EAAD,CAAUD,KAAMA,EAA6CC,MAAOA,GAAzCD,EAAKS,GAAKiC,OAAO1C,EAAKK,kBAQnDwB,IAAOc,GAAV","file":"static/js/4.9a47d5c6.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { removeTodo, toggleTodo } from \"../../redux/actions\";\r\nimport sprite from \"../../assets/sprite.svg\";\r\nimport styled from 'styled-components';\r\nimport { IFetchedTodo } from \"../../models/response\";\r\nimport { ITodo } from \"../../models/state\";\r\n\r\ninterface IProps {\r\n  todo: IFetchedTodo | ITodo;\r\n  index: number\r\n}\r\n\r\nconst TodoItem = ({ todo, index }: IProps) => {\r\n  const dispatch = useDispatch();\r\n  const classes = [];\r\n  \r\n  if (todo.completed) {\r\n    classes.push(\"done\");\r\n  }\r\n\r\n  const addItem = useCallback((id) => {\r\n    dispatch(toggleTodo(id))\r\n  },[dispatch]);\r\n  \r\n  const remove = useCallback((id) => {\r\n    dispatch(removeTodo(id))\r\n  },[dispatch])\r\n  \r\n  return (\r\n    <ListItem>\r\n      <Label className={classes.join(\" \")}>\r\n        <Input\r\n          type=\"checkbox\"\r\n          onChange={addItem.bind(null,todo.id)}\r\n          checked={todo.completed}\r\n        />\r\n        <Checkbox></Checkbox>\r\n        <NumberTodo>{index + 1}</NumberTodo>&emsp;\r\n        {todo.title}\r\n      </Label>\r\n      <Button onClick={remove.bind(null,todo.id)}>\r\n        <svg width=\"15px\" height=\"15px\">\r\n          <use href={sprite + \"#close\"}></use>\r\n        </svg>\r\n      </Button>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTodo,\r\n  removeTodo,\r\n};\r\n\r\nexport default connect(null,mapDispatchToProps)(TodoItem);\r\n\r\n\r\nconst ListItem = styled.li`\r\nposition: relative;\r\npadding: 15px 0;\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\nalign-items: center;\r\nborder-bottom: 1px solid rgba(0,0,0,.1);\r\nborder-radius: 4px;\r\n&:last-child {\r\n  border-bottom: none;\r\n}\r\n`;\r\n\r\nconst Label = styled.label`\r\nposition: relative;\r\ndisplay: flex;\r\njustify-content: space-between;\r\nalign-items: center;\r\ncursor: pointer;\r\n`;\r\n\r\nconst Input = styled.input`\r\nvisibility: hidden;\r\nappearance: none;\r\n&:checked ~ span{\r\n  background: #03a9f4;\r\n  border: 1px solid #03a9f4;\r\n}\r\n&:checked ~ span:before{\r\n  border-left: 2px solid #fff;\r\n  border-bottom: 2px solid #fff;\r\n}\r\n`;\r\n\r\n\r\nconst NumberTodo = styled.p`\r\nposition: absolute;\r\n`;\r\n\r\nconst Checkbox = styled.span`\r\nposition: absolute;\r\nleft: -30px;\r\nwidth: 20px;\r\nheight: 20px;\r\nborder: 1px solid #ccc;\r\nborder-radius: 50%;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\n&:before{\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 5px;\r\n  width: 10px;\r\n  height: 5px;\r\n  border-left: 2px solid #ccc;\r\n  border-bottom: 2px solid #ccc;\r\n  transform: rotate(-40deg);\r\n}\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nheight: 30px;\r\nwidth: 30px;\r\nborder-radius: 50%;\r\nbackground-color: #fc3275;\r\ncursor: pointer;\r\noutline: none;\r\nborder: none;\r\npadding: 0;\r\n`;","import React from \"react\";\r\nimport TodoItem from \"../todoItem\";\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { useSelector } from 'react-redux'\r\nimport { IFetchedTodo } from \"../../models/response\";\r\nimport { RootState } from \"../../redux/rootReducer\";\r\nimport { ITodo } from \"../../models/state\";\r\n\r\nconst TodoList: React.FC = () => {\r\n  const todos = useSelector((state: RootState) => state.todo.todos ); \r\n\r\n  return (\r\n    <List>\r\n      {todos.map((todo: IFetchedTodo | ITodo, index: number) => {\r\n        return <TodoItem todo={todo} key={todo.id + String(todo.completed)} index={index} />;\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n\r\nconst List = styled.ul`\r\nposition: relative;\r\nmargin: 0;\r\npadding: 40px;\r\n`;"],"sourceRoot":""}